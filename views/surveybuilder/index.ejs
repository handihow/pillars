<!DOCTYPE html>
<html lang="en">
    <head>
        <title>Pillars</title>
        <link rel="shortcut icon" href="/img/logo.ico" type="image/x-icon" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <script src="https://unpkg.com/jquery"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js"></script>
        <script src="https://surveyjs.azureedge.net/1.7.19/survey.ko.js"></script>
        <link href="https://surveyjs.azureedge.net/1.7.19/modern.css" type="text/css" rel="stylesheet"/>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.10/ace.min.js" type="text/javascript" charset="utf-8"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.10/ext-language_tools.js" type="text/javascript" charset="utf-8"></script>
        <!-- Uncomment to enable Select2 <script src="https://unpkg.com/jquery"></script> <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet" /> <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.min.js"></script> -->
        <link href="https://surveyjs.azureedge.net/1.7.19/survey-creator.css" type="text/css" rel="stylesheet"/>
        <script src="https://surveyjs.azureedge.net/1.7.19/survey-creator.js"></script>
        <!-- This should be uncommented for jQuery-based widgets <script src="https://unpkg.com/jquery"></script>-->

        <link rel="stylesheet" href="https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css">

        <script src="https://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.24.0/moment.min.js"></script>
        <link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/themes/smoothness/jquery-ui.css" type="text/css" rel="stylesheet"/>

        <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script>

        <script src="https://surveyjs.azureedge.net/1.7.19/surveyjs-widgets.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.2.0/papaparse.min.js"></script>

    </head>
    <body>

        <div id="surveyContainer">
            <div id="creatorElement"></div>
        </div>

        <div id="formData" hidden><%=JSON.stringify(form)%></div>

        <script type="text/javascript">

            var mainColor = "#009FE3";
            var mainHoverColor = "#F9B233";
            var textColor = "#4a4a4a";
            var headerColor = "#009FE3";
            var headerBackgroundColor = "#4a4a4a";
            var bodyContainerBackgroundColor = "#f8f8f8";

            var defaultThemeColorsSurvey = Survey
                .StylesManager
                .ThemeColors["default"];
            defaultThemeColorsSurvey["$main-color"] = mainColor;
            defaultThemeColorsSurvey["$main-hover-color"] = mainHoverColor;
            defaultThemeColorsSurvey["$text-color"] = textColor;
            defaultThemeColorsSurvey["$header-color"] = headerColor;
            defaultThemeColorsSurvey["$header-background-color"] = headerBackgroundColor;
            defaultThemeColorsSurvey["$body-container-background-color"] = bodyContainerBackgroundColor;

            var defaultThemeColorsEditor = SurveyCreator
                .StylesManager
                .ThemeColors["default"];
            defaultThemeColorsEditor["$primary-color"] = mainColor;
            defaultThemeColorsEditor["$secondary-color"] = mainColor;
            defaultThemeColorsEditor["$primary-hover-color"] = mainHoverColor;
            defaultThemeColorsEditor["$primary-text-color"] = textColor;
            defaultThemeColorsEditor["$selection-border-color"] = mainColor;

            Survey
                .StylesManager
                .applyTheme();
            SurveyCreator
                .StylesManager
                .applyTheme("bootstrap");

            var customSurveyProperties =  
            [
              {
                identifier: 'isprofilequestion',
                title: 'Is profielvraag',
                type: 'boolean',
                default: false,
                dependsOn: null
              },
              {
                identifier: 'istestquestion',
                title: 'Is onderdeel van test',
                type: 'boolean',
                default: false,
                dependsOn: null
              },
              {
                identifier: 'subject',
                title: 'Onderdeel',
                type: 'choices',
                dependsOn: 'istestquestion',
                choices: [
                    {value: 'DG', text: 'Digitale geletterdheid'}, 
                    {value: 'PDH', text: 'Pedagogisch didactisch handelen'}, 
                    {value: 'PO', text: 'Persoonlijke ontwikkeling'},
                    {value: 'WSC', text: 'Werken in de schoolcontext'}
                ]
              }, 
              { 
                identifier: 'topic',
                title: 'Subonderdeel',
                type: 'choices',
                dependsOn: 'subject',
                choices: function(obj){
                    var availableChoices = [
                        {parent: 'DG', value: 'IB', text: 'ICT basisvaardigheden'},
                        {parent: 'DG', value: 'MW', text: 'Mediawijsheid'},
                        {parent: 'DG', value: 'IV', text: 'Informatievaardigheden'},
                        {parent: 'DG', value: 'CT', text: 'Computational Thinking'},
                        {parent: 'PDH', value: 'IG', text: 'Instructie geven'},
                        {parent: 'PDH', value: 'LTNL', text: 'Laten leren'},
                        {parent: 'PDH', value: 'TTSN', text: 'Toetsen'},
                        {parent: 'PO', value: 'OVVG', text: 'Ontwikkelingen volgen in vakgebied'},
                        {parent: 'PO', value: 'DVE', text: 'Delen van ervaringen'},
                        {parent: 'WSC', value: 'RE', text: 'Registreren'},
                        {parent: 'WSC', value: 'VEV', text: 'Volgen en verantwoorden'},
                        {parent: 'WSC', value: 'COM', text: 'Communiceren'}
                    ]
                    var entity = !!obj
                        ? obj.subject
                        : null;
                    //If targetEntity is empty then return the empty array
                    if (!entity) {
                        return [];
                    } else {
                        var choices = [];
                        availableChoices.forEach(function(ac){
                            if(ac.parent === entity){
                                choices.push({
                                    value: ac.value,
                                    text: ac.text
                                })
                            }
                        })
                        return choices;
                    }
                }
              },
              {
                identifier: 'maxscore',
                title: 'Maximum score',
                type: 'number',
                default: 100,
                dependsOn: 'istestquestion'
              },
              {
                identifier: 'minscore',
                title: 'Min score vaardig',
                type: 'number',
                dependsOn: 'istestquestion',
              }
            ];
            customSurveyProperties.forEach(property => {
              if(property.type === 'choices'){
                //It uses rest full service and choicesCallback function to tell property editor that choices are loaded from the web
                Survey.Serializer.addProperty('question', { 
                  name: property.identifier, 
                  title: property.title,
                  dependsOn: property.dependsOn,
                  visibleIf: function(obj){
                    if(property.dependsOn && !obj[property.dependsOn]){
                      return false;
                    } else {
                      return true;
                    }
                  },
                  choices: property.choices                
                });
              } else {
                Survey.Serializer.addProperty('question', { 
                  name: property.identifier, 
                  type: property.type, 
                  default: property.default,
                  dependsOn: property.dependsOn,
                  visibleIf: function(obj){
                    if(property.dependsOn && !obj[property.dependsOn]){
                      return false;
                    } else {
                      return true;
                    }
                  }
                 });
              }
              SurveyCreator
                .SurveyQuestionEditorDefinition
                .definition['question']
                .properties.push({name: property.identifier, title: property.title, tab: "PODD instellingen"}); //does not work  
              SurveyCreator['localization'].getLocale('').p[property.identifier] = property.title;
            });

            // add score value to each itemvalue (matrix, select, dropdown)
            Survey.Serializer.addProperty('itemvalue', {name: 'score', type: 'number'});

            var formText = $('#formData').text();
            var formData = JSON.parse(formText);

            var options = {
                showLogicTab: true,
                questionTypes: ["text", "boolean", "checkbox", "radiogroup", "dropdown", "imagepicker", "matrix", "matrixdropdown", "expression", "image", "html", "rating"]
            };
            var creator = new SurveyCreator.SurveyCreator("creatorElement", options);
            creator.text = formData.text || "";
            creator.showToolbox = "right";
            creator.showPropertyGrid = "right";
            creator.haveCommercialLicense = true;
            creator.rightContainerActiveItem("toolbox");
            creator.isAutoSave = true;
            creator
            .toolbarItems
            .push({
                id: 'csv-export',
                visible: true,
                title: 'Download',
                action: function(){
                    createCSV();
                }
            })
            creator
            .toolbarItems
            .push({
                id: "go-back",
                visible: true,
                title: "Sluiten",
                action: function () {
                    window.location.href = '/admin/forms';                
                }
            });

            creator.saveSurveyFunc = function(saveNo, callback) {
                //Save the survey definition into a local storage
                $.ajax({
                  url: '/form/' + formData._id,
                  type: 'POST',
                  contentType: 'application/json',
                  data: JSON.stringify({
                    text: creator.text,
                    id: formData._id
                  }),
                  success: function(response){
                    if(response.success){
                      return true;
                    } else {
                      alert('Fout bij het opslaan van vragenlijst ...' + response.message);
                      return false;
                    }
                    
                  },
                  error: function(error){
                    console.log(error);
                    alert('Fout bij het opslaan van vragenlijst ...' + error.message);
                    return false;
                  }
                })
            };

            createCSV = function(){
                var surveyModel = new Survey.Model(formData.text);
                try {
                  var questions = [];
                  surveyModel
                    .getAllQuestions()
                    .forEach((q) => {
                      var choices = [];
                      switch (q.getType()) {
                        case "checkbox":
                        case "radiogroup":
                        case "dropdown":
                        case "imagepicker":
                          q.choices.map(c => choices.push({value: c.value, title: c.text, score: c.score ? c.score : null}));
                          break;
                        case "rating":
                          if(q.rateValues.length>0){
                            q.rateValues.map(rv => choices.push({value: rv.value, title: rv.title, score: rv.score ? rv.score : null}));
                          } else {
                            choices.push({value: q.rateMin ? q.rateMin : 1, title: q.minRateDescription ? q.minRateDescription : 'Minimum', score: null})
                            choices.push({value: q.rateStep ? q.rateStep : 1, title: 'Stap', score: null})
                            choices.push({value: q.rateMax ? q.rateMax : 5, title: q.maxRateDescription ? q.maxRateDescription : 'Maximum', score: null})
                          }
                          break;
                        case "matrix":
                          q.rows.map(r => {
                            let columnScores = q.columns.map(c => c.score ? c.score : null);
                            choices.push({value: r.value, title: r.text, score: columnScores});
                          });
                          break;
                        default:
                          console.log(q.getType() + ' is not part of calculation matrix');
                      }
                      let choicesStr = "";
                      let choicesLabelStr = "";
                      choices.map(c => {
                        let score = c.score ? c.score : '-';
                        choicesStr += c.title + "(" + score + "), ";
                        choicesLabelStr += c.value + "(" + score + "), ";
                      });
                      var question = {
                        'ID': q.name,
                        'Zichtbaar': q.isVisible && q.isParentVisible ? 'ja' : 'nee',
                        'Pagina': q.parent.name,
                        'Vraag': q.title,
                        'Type': q.getType(),
                        'Profielvraag': q.isprofilequestion ? 'ja' : 'nee',
                        'Testvraag': q.istestquestion ? 'ja' : 'nee',
                        'Onderdeel': q.subject ? q.subject : '-',
                        'Subonderdeel': q.topic ? q.topic : '-',
                        'Min score': q.minscore ? q.minscore : '-',
                        'Max score' : q.maxscore ? q.maxscore : '-',
                        'Keuzes': choicesStr,
                        'Keuze labels': choicesLabelStr
                      }
                      questions.push(question);
                    });

                    var csvContent = Papa.unparse(questions, {
                        delimiter: ";",
                        columns: ['ID', 'Vraag', 'Zichtbaar', 'Pagina', 'Type', 'Profielvraag', 'Testvraag', 'Onderdeel', 'Subonderdeel', 'Min score', 'Max score', 'Keuzes', 'Keuze labels']
                    });
                    var csvData = new Blob([csvContent], {type: 'text/csv;charset=utf-8;'});
                    var csvURL =  null;
                    if (navigator.msSaveBlob)
                    {
                        csvURL = navigator.msSaveBlob(csvData, 'download.csv');
                    }
                    else
                    {
                        csvURL = window.URL.createObjectURL(csvData);
                    }

                    var tempLink = document.createElement('a');
                    tempLink.href = csvURL;
                    tempLink.setAttribute('download', 'download.csv');
                    tempLink.click();
                } catch (err) {
                  console.log(err);
                }
            }


        </script>

    </body>

</html>