<script>

	setCustomSurveyProperties = function(){
      var customSurveyProperties =  
        [
          {
            identifier: 'isprofilequestion',
            title: 'Is profielvraag',
            type: 'boolean',
            default: false,
            dependsOn: null
          },
          {
            identifier: 'istestquestion',
            title: 'Is onderdeel van test',
            type: 'boolean',
            default: false,
            dependsOn: null
          },
          {
            identifier: 'subject',
            title: 'Onderdeel',
            type: 'choices',
            dependsOn: 'istestquestion',
            choices: [
                {value: 'DG', text: 'Digitale geletterdheid'}, 
                {value: 'PDH', text: 'Pedagogisch didactisch handelen'}, 
                {value: 'PO', text: 'Persoonlijke ontwikkeling'},
                {value: 'WSC', text: 'Werken in de schoolcontext'}
            ]
          }, 
          { 
            identifier: 'topic',
            title: 'Subonderdeel',
            type: 'choices',
            dependsOn: 'subject',
            choices: function(obj){
                var entity = !!obj
                    ? obj.subject
                    : null;
                //If targetEntity is empty then return the empty array
                if (!entity) {
                    return [];
                } else {
                    var choices = [];
                    categories.forEach(function(ac){
                        if(ac.parent === entity){
                            choices.push({
                                value: ac.value,
                                text: ac.text
                            })
                        }
                    })
                    return choices;
                }
            }
          },
          {
            identifier: 'maxscore',
            title: 'Maximum score',
            type: 'number',
            default: 100,
            dependsOn: 'istestquestion'
          },
          {
            identifier: 'minscore',
            title: 'Min score vaardig',
            type: 'number',
            dependsOn: 'istestquestion',
          }
        ];
        customSurveyProperties.forEach(property => {
          if(property.type === 'choices'){
            //It uses rest full service and choicesCallback function to tell property editor that choices are loaded from the web
            Survey.Serializer.addProperty('question', { 
              name: property.identifier, 
              title: property.title,
              dependsOn: property.dependsOn,
              visibleIf: function(obj){
                if(property.dependsOn && !obj[property.dependsOn]){
                  return false;
                } else {
                  return true;
                }
              },
              choices: property.choices                
            });
          } else {
            Survey.Serializer.addProperty('question', { 
              name: property.identifier, 
              type: property.type, 
              default: property.default,
              dependsOn: property.dependsOn,
              visibleIf: function(obj){
                if(property.dependsOn && !obj[property.dependsOn]){
                  return false;
                } else {
                  return true;
                }
              }
             });
          }
        });
        // add score value to each itemvalue (matrix, select, dropdown)
        Survey.Serializer.addProperty('itemvalue', {name: 'score', type: 'number'});
    }

	$(document).ready(function() {

		if (typeof Survey == "undefined") {
		   return console.log('survey model not defined');
		}

		function changePageAppearance(el){
			['info', 'table', 'chart', 'analysis', 'bubbles'].forEach(function(page){
				if(page==el){
					if($('#'+ page).hasClass("hidden")){
			        	$('#'+ page).removeClass("hidden");
			        }
			        if(!$('#'+ page + 'Button').hasClass("active")){
			        	$('#'+ page + 'Button').addClass("active");
			        }
				} else {
					if(!$('#' + page).hasClass("hidden")){
			        	$('#' + page).addClass("hidden");
			        }
			        if($('#'+ page + 'Button').hasClass("active")){
			        	$('#'+ page + 'Button').removeClass("active");
			        }
				}
			})
		}


		if($("#infoButton").length > 0) {
			$("#infoButton").click(function(){
				changePageAppearance('info');
		      });
		}

		if($("#tableButton").length > 0) {
			$("#tableButton").click(function(){
				changePageAppearance('table');
		      });
		}

		if($("#chartButton").length > 0) {
			$("#chartButton").click(function(){
				changePageAppearance('chart');
		      });
		}

		if($("#analysisButton").length > 0) {
			$("#analysisButton").click(function(){
				changePageAppearance('analysis');
		      });
		}

		if($("#bubblesButton").length > 0) {
			$("#bubblesButton").click(function(){
				changePageAppearance('bubbles');
		      });
		}

		if($( '#surveyResults' ).length==0){
			return console.log('not on the survey result show page');
		}

		var resultsInfo = $( '#surveyResults' ).text();

		var result = JSON.parse(resultsInfo || '[]');


		if(result.length===0){
			return console.log('no survey results');
		}

		var surveyInfoText = $( '#surveyText' ).text();

		var surveyInfo = JSON.parse(surveyInfoText || '[]');

		if(surveyInfo.competenceStandardKey === 'podd'){
			setCustomSurveyProperties();
		}

		var surveyData = surveyInfo.survey;

		var survey = new Survey.Model(surveyData);

		var dateSubmitted = result.map(function(r) {
	          return {date: r.createdAt.slice(0,10).split('-').reverse().join('/')} || "{}";
	        });

  		var results = result.map(function(r) {
        	returnedData = r.result || {};
        	if(!surveyInfo.isPublic && Object.keys(returnedData).length > 0){
        		returnedData.firstName = r.user.firstName ? r.user.firstName : '-';
        		returnedData.lastName = r.user.lastName ? r.user.lastName : '-';
        		returnedData.email = r.user.username ? r.user.username : '-';
        		returnedData.function = r.user.publicProfile && r.user.job ? r.user.job : '-';
        		returnedData.age = r.user.publicProfile && 
        								r.user.dateOfBirth ? ~~((Date.now() - new Date(r.user.dateOfBirth)) / (31557600000)) : 
        								'-';
        		returnedData.gender = r.user.publicProfile && r.user.gender ? r.user.gender : '-';
        		returnedData.gradeLevel = r.user.publicProfile && r.user.gradeLevelGroup ? r.user.gradeLevelGroup : '-';
        		returnedData.isTeacher = r.user.publicProfile &&  r.user.isTeacher ? 'onderwijzend' : 'ondersteunend of -';
        		returnedData.organisation = r.user ? r.user.organisation.name : '-';
        		returnedData.school = r.user ? r.user.school.map(s => s.name).join() : '-';
        		returnedData.city = r.user ? r.user.school.map(s => s.city).join() : '-';
        	}
        	returnedData.date = r.createdAt ? r.createdAt.slice(0,10).split('-').reverse().join('/') : '-';
        	returnedData.link = r.user.publicProfile ? '<a href="/survey/' + r._id + '/result" target=_blank>Inzending</a>' : 'Geen inzage';
        	if(surveyInfo.isCompetenceSurvey){
        		returnedData.chart = r.user._id && r.user.publicProfile ? '<a href="/survey/' + r.survey + '/' + r.user._id + '" target=_blank>Grafiek</a>' : 'Geen inzage';	
        	}
          return returnedData;
        });

	    var standardColumns = [];
	 	
	 	standardColumns.push({
	 		data: 'date',
	 		sTitle: 'Datum'
	 	})

	 	if(!surveyInfo.isPublic){
	 		standardColumns.push({
		 		data: 'firstName',
		 		sTitle: 'Voornaam',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'lastName',
		 		sTitle: 'Achternaam',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'email',
		 		sTitle: 'Email'
		 	});
		 	standardColumns.push({
		 		data: 'function',
		 		sTitle: 'Functie',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'age',
		 		sTitle: 'Leeftijd',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'gender',
		 		sTitle: 'Geslacht',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'gradeLevel',
		 		sTitle: 'Bouw',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'isTeacher',
		 		sTitle: 'Personeeltype',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'organisation',
		 		sTitle: 'Organisatie',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'school',
		 		sTitle: 'School'
		 	});
		 	standardColumns.push({
		 		data: 'city',
		 		sTitle: 'Plaatsnaam',
		 		bVisible: false
		 	});
	 	};

	 	standardColumns.push({
		    	data: 'link',
		    	sTitle: 'Bekijk',
		    	sortable: false
		    });

	 	if(surveyInfo.isCompetenceSurvey){
		 	standardColumns.push({
			    	data: 'chart',
			    	sTitle: 'Grafiek',
			    	sortable: false
			    });
		}

		var surveyQuestions;
	    if(surveyInfo.competenceStandardKey==='podd'){
	    	surveyQuestions = survey.getAllQuestions().filter(q => q.istestquestion);
	    } else {
	    	surveyQuestions = survey.getAllQuestions();
	    }

      	var surveyColumns = surveyQuestions.map(function(q, i) {
      	  // var maxColumnsFromSurvey = surveyInfo.isPublic ? 4 : 1;
          return {
          	type: q.getType(),
          	choices: ['radiogroup','checkbox','dropdown'].includes(q.getType()) ? q.choices.map(c => c.text) : [],
          	values: ['radiogroup','checkbox','dropdown'].includes(q.getType()) ? q.choices.map(c => c.value) : [],
          	question: q,
            data: q.name,
            tooltip: q.title ? q.title : q.name,
            sTitle: (i+1).toString(),
            className: 'dt-body-right',
            // sTitle: (q.title || "").trim(" ") || q.name,
            // bVisible: i > maxColumnsFromSurvey ? false : true,
            mRender: function(data, type, row) {
              survey.data = row;
              var value = q.value;
              var text = '-';
              if(surveyInfo.competenceStandardKey === 'podd'){
              	var index = result.findIndex(r => r.user._id === row._id);
              	if(index>-1 && typeof result[index]['questionScores'][q.name] !== 'undefined'){
              		text = result[index]['questionScores'][q.name] + '%';
              	}
              } else if(surveyInfo.competenceStandardKey === 'podd'){
              	text = '-';
              } else if(value === "true" || (typeof value === 'boolean' && value)){
              	text = "100%"
              } else if (value === "false" || typeof value === 'boolean') {
                text = "0%"	
              } else if(typeof value !== 'undefined') {
              	text = (parseFloat(value) * 100).toString() + "%"
              }
              return "<div data-variation='very wide' data-tooltip='" + q.title + "'>" + text + "</div>"
            }
          };
        });

	    var columns = standardColumns.concat(surveyColumns);

	    var table = $("#resultsTable").DataTable({
	    	rowCallback: function(row, data){
	    		surveyQuestions.forEach((q,i) => {
	    			var cellValue = data[q.name];
	    			var columnIndex = 5 + i;
	    			if(surveyInfo.competenceStandardKey === 'podd'){
	    				var index = result.findIndex(r => r.user._id === data._id);
		              	if(index>-1 && typeof result[index]['questionScores'][q.name] !== 'undefined'){
		              		var score = result[index]['questionScores'][q.name];
		              		if(score < q.minscore/q.maxscore * 100){
		              			$("td:eq(" + columnIndex + ")", row).addClass("negative");
		              		} else {
		              			$("td:eq(" + columnIndex + ")", row).addClass("positive");
		              		}
		              	}
	    			} else if(cellValue === "true" || cellValue === "1" || cellValue === "0.75" || (typeof cellValue === 'boolean' && cellValue)){
	    				$("td:eq(" + columnIndex + ")", row).addClass("positive");
	    			} else if(cellValue === "false" || cellValue === "0" || cellValue === "0.25" || typeof cellValue === 'boolean'){
	    				$("td:eq(" + columnIndex + ")", row).addClass("negative");
	    			} else if(cellValue === "0.5"){
	    				$("td:eq(" + columnIndex + ")", row).addClass("warning");
	    			}
	    		})
	    		
	    	},
	    	pageLength: 50,
	    	retrieve: true,
	        columns: columns,
	        data: results,
	        dom: 'Bfrtip',
	        buttons: [
	            'copy', 'csv', 'excel', 'colvis'
	        ],
	        "language": {
			    "sProcessing": "Bezig...",
			    "sLengthMenu": "_MENU_ resultaten weergeven",
			    "sZeroRecords": "Geen resultaten gevonden",
			    "sInfo": "_START_ tot _END_ van _TOTAL_ resultaten",
			    "sInfoEmpty": "Geen resultaten om weer te geven",
			    "sInfoFiltered": " (gefilterd uit _MAX_ resultaten)",
			    "sInfoPostFix": "",
			    "sSearch": "Zoeken:",
			    "sEmptyTable": "Geen resultaten aanwezig in de tabel",
			    "sInfoThousands": ".",
			    "sLoadingRecords": "Een moment geduld aub - bezig met laden...",
			    "oPaginate": {
			        "sFirst": "Eerste",
			        "sLast": "Laatste",
			        "sNext": "Volgende",
			        "sPrevious": "Vorige"
			    },
			    "oAria": {
			        "sSortAscending":  ": activeer om kolom oplopend te sorteren",
			        "sSortDescending": ": activeer om kolom aflopend te sorteren"
			    },
			    "buttons": {
	                "colvis": "Zichtbare kolommen"
	            }
			},
			initComplete: function () {
				if(surveyInfo.isPublic){
					return; //no filters on public surveys
				}
	            this.api().columns([1,2,3,4,6,7,8,9,10,11]).every( function () {
	                var column = this;
	                var select = $('<select><option value=""></option></select>')
	                    .appendTo( $(column.header() ))
	                    .on( 'change', function () {
	                        var val = $.fn.dataTable.util.escapeRegex(
	                            $(this).val()
	                        );
	 
	                        column
	                            .search( val ? '^'+val+'$' : '', true, false )
	                            .draw();
	                    } );
	 
	                column.data().unique().sort().each( function ( d, j ) {
	                	if(d && typeof d==='string' && d.length>0){
	                		select.append('<option value="' + d + '">' + d.substr(0,30) + '</option>')
	                	} else if(d && Array.isArray(d)){
	                		select.append('<option value="' + d.join(',') + '">' + d.join(',') + '</option>')
	                	}
	                } );
	            } );
	        }
	      });

	    var vispanelresults = result.map(r => r.result);
	    
	    var hasBooleanRadiogroupQuestions = false;

	    const chartElementVisibility = surveyInfo.chartElementVisibility ? surveyInfo.chartElementVisibility : [];
	    const chartVisibility = [];
	    survey.getAllQuestions().forEach(function(q){
	    	const questionIndex = chartElementVisibility.findIndex(ce => ce.name === q.name);
		      if(questionIndex === -1){
		          //this question was added
		        chartVisibility.push({
		          name: q.name,
		          displayName: q.title ? q.title : q.name,
		          visibility: 0,
		          type: null
		        })
		      } else {
		        chartVisibility.push(chartElementVisibility[questionIndex]);
		      }
	    })

	    var normalizedData = vispanelresults.map(function(item) {
		    survey.getAllQuestions().forEach(function(q) {
		      if(q.getType()=='radiogroup'){
		      	hasBooleanRadiogroupQuestions = true;
		      }
		      if (item[q.name] === undefined) {
		        item[q.name] = "";
		      } else if(item[q.name] === true) {
		      	item[q.name] = "true"
		      } else if(item[q.name] === false) {
		      	item[q.name] = "false"
		      } 
		    });
		    return item;
		  });
	    
	    SurveyAnalytics.SelectBasePlotly.types = ["pie", "bar", "doughnut"];

	    SurveyAnalytics.GaugePlotly.types = ["bullet"];
	    SurveyAnalytics.GaugePlotly.showAsPercentage = true

    	SurveyAnalytics.VisualizerBase.customColors = 
    			hasBooleanRadiogroupQuestions && surveyInfo.competenceStandardKey !== 'podd' ? 
    			[
                    'rgba(227,6,19 ,1)',
                    'rgba(0,159,227, 1)',
                ] :
    			[
                    'rgba(0,159,227, 1)',
                    'rgba(227,6,19 ,1)',
                    'rgba(249,178,51, 1)',
                    'rgba(0, 0, 0, 1)',
                    'rgba(18,172,19, 1)',
                ];	
	    
	    

		var visPanel = new SurveyAnalytics.VisualizationPanel(document.getElementById("resultCharts"), survey.getAllQuestions(), normalizedData, { allowDynamicLayout: false }, chartVisibility);


		visPanel.showHeader = true;
        visPanel.onVisibleElementsChanged.add((sender, options) => {
          const elements = sender.getElements();
          $.ajax({
              url: '/api/chartvisibility/'+surveyInfo._id,
              type: 'POST',
              contentType: 'application/json',
              data: JSON.stringify({
                chartElementVisibility: elements
              }),
              success: function(response){
                if(response.success){
                  console.log('saved chart element visibility successfully')
                  return true;
                } else {
                  alert('Fout bij het bewaren van zichtbaarheid van grafieken ...' + response.message);
                  return false;
                }
                
              },
              error: function(error){
                alert('Fout bij het bewaren van zichtbaarheid van grafieken ...' + error.errorThrown);
                return false;
              }
            })
        });


		visPanel.render();

		

		if(surveyInfo.isCompetenceSurvey){

			var statisticsString = $( '#statistics' ).text();

			var statistics = JSON.parse(statisticsString || '[]')

			var data = [];

			var markerColors = [
                    'rgba(0,159,227, 1)',
                    'rgba(227,6,19,1)',
                    'rgba(249,178,51, 1)',
                    'rgba(0, 0, 0, 1)',
                    'rgba(18,172,19, 1)',
                    'rgba(34, 34, 188, 1)',
                    'rgba(246, 190, 91, 1)',
                    'rgba(58, 58, 58, 1)',
                    'rgba(191,35,66, 1)',
                    'rgba(36, 83, 189, 1)',
                    'rgba(249, 203, 19, 1)',
                    'rgba(112, 112, 112, 1)',
                ];
            var fillColors = [
                    'rgba(0,159,227, 0.7)',
                    'rgba(227,6,19,0.7)',
                    'rgba(249,178,51, 0.7)',
                    'rgba(0, 0, 0, 0.7)',
                    'rgba(18,172,19, 0.7)',
                    'rgba(34, 34, 188, 0.7)',
                    'rgba(246, 190, 91, 0.7)',
                    'rgba(58, 58, 58, 0.7)',
                    'rgba(191,35,66, 0.7)',
                    'rgba(36, 83, 189, 0.7)',
                    'rgba(249, 203, 19, 0.7)',
                    'rgba(112, 112, 112, 0.7)',
                ];

			statistics.forEach(function(stat, statIndex){
				if(statIndex > 0){
					var trace = {
						boxpoints: 'all',
						y: stat.statistics,
						type: 'box',
						name: stat.title,
						jitter: 0.3,
		    			pointpos: -1.8,
		    			marker: {
		    				color:markerColors[statIndex - 1]
		    			},
						fillcolor: fillColors[statIndex - 1],
					}
					data.push(trace);
				}
			});

			var layout = {
			  showlegend: true,
			  autosize: true,
			  width: 1000,
			  height: 600
			  
			}
			Plotly.newPlot('analysisChart', data, layout, {responsive: true});
		} else if(surveyInfo.isSoftwareSurvey){
			var bubblesString = $( '#bubblesInfo' ).text();

			var bubbles = JSON.parse(bubblesString || '[]');

			console.log(bubbles);
			
			var traces = [];

			bubbles.x.forEach(function(bubble, index){
				var newTrace = {
				  x: [bubbles.x[index]],
				  y: [bubbles.y[index]],
				  text: [bubbles.text[index]],
				  mode: 'markers',
				  marker: {
				    color: [bubbles.color[index]],
				    size: [bubbles.size[index]],
				  },
				  name: bubbles.text[index],
				};
				traces.push(newTrace);
			})

			var data = traces;

			var layout = {
			  title: 'Frequentie versus Noodzaak en Kwaliteit',
			  showlegend: true,
			  height: 600,
			  width: 1000,
			  xaxis: {
			  	title: 'Frequentie (0 = weinig, 1 = zeer vaak)'
			  },
			  yaxis: {
			  	title: 'Noodzaak (0 = niet belangrijk, 1 = essentieel)'
			  }
			};

			Plotly.newPlot('bubblesChart', data, layout);
		}

		$('#loader').hide();

		window.dispatchEvent(new Event('resize'));
	
	});
</script>