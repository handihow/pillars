<script>
	$(document).ready(async function() {

		if (typeof Survey == "undefined") {
		   return console.log('survey model not defined');
		}

		function changePageAppearance(el){
			['info', 'table', 'chart', 'analysis', 'bubbles'].forEach(function(page){
				if(page==el){
					if($('#'+ page).hasClass("hidden")){
			        	$('#'+ page).removeClass("hidden");
			        }
			        if(!$('#'+ page + 'Button').hasClass("active")){
			        	$('#'+ page + 'Button').addClass("active");
			        }
				} else {
					if(!$('#' + page).hasClass("hidden")){
			        	$('#' + page).addClass("hidden");
			        }
			        if($('#'+ page + 'Button').hasClass("active")){
			        	$('#'+ page + 'Button').removeClass("active");
			        }
				}
			})
		}


		if($("#infoButton").length > 0) {
			$("#infoButton").click(function(){
				changePageAppearance('info');
		      });
		}

		if($("#tableButton").length > 0) {
			$("#tableButton").click(function(){
				changePageAppearance('table');
		      });
		}

		if($("#chartButton").length > 0) {
			$("#chartButton").click(function(){
				changePageAppearance('chart');
		      });
		}

		if($("#analysisButton").length > 0) {
			$("#analysisButton").click(function(){
				changePageAppearance('analysis');
		      });
		}

		if($("#bubblesButton").length > 0) {
			$("#bubblesButton").click(function(){
				changePageAppearance('bubbles');
		      });
		}

		if($( '#surveyResults' ).length==0){
			return console.log('not on the survey result show page');
		}

		var $progress = $('#progressOnPieChartCalcs.ui.progress');

		var resultsInfo = $( '#surveyResults' ).text();

		var result = JSON.parse(resultsInfo || '[]');

		if(result.length===0){
			return console.log('no survey results');
		}

		var surveyInfoText = $( '#surveyText' ).text();

		var surveyInfo = JSON.parse(surveyInfoText || '[]');

		var surveyData = surveyInfo.survey;

		var survey = new Survey.Model(surveyData);

		var dateSubmitted = result.map(function(r) {
	          return {date: r.createdAt.slice(0,10).split('-').reverse().join('/')} || "{}";
	        });


  		var results = result.map(function(r) {
        	returnedData = r.result || {};
        	if(!surveyInfo.isPublic && Object.keys(returnedData).length > 0){
        		returnedData.firstName = r.user.firstName ? r.user.firstName : '-';
        		returnedData.lastName = r.user.lastName ? r.user.lastName : '-';
        		returnedData.email = r.user.username ? r.user.username : '-';
        		returnedData.function = r.user.publicProfile ? r.user.job : '-';
        		returnedData.age = r.user.publicProfile && 
        								r.user.dateOfBirth ? ~~((Date.now() - new Date(r.user.dateOfBirth)) / (31557600000)) : 
        								'-';
        		returnedData.gender = r.user.publicProfile ? r.user.gender : '-';
        		returnedData.gradeLevel = r.user.publicProfile ? r.user.gradeLevelGroup : '-';
        		returnedData.isTeacher = r.user.publicProfile &&  r.user.isTeacher ? 'onderwijzend' : 'ondersteunend of -';
        		returnedData.organisation = r.user ? r.user.organisation.name : '-';
        		returnedData.school = r.user ? r.user.school.map(s => s.name).join() : '-';
        		returnedData.city = r.user ? r.user.school.map(s => s.city).join() : '-';
        	}
        	returnedData.date = r.createdAt ? r.createdAt.slice(0,10).split('-').reverse().join('/') : '-';
        	returnedData.link = '<a href="/survey/' + r._id + '/result">Inzending</a>'
          return returnedData;
        });

        $progress.progress('increment');

	    var standardColumns = [];
	 	
	 	standardColumns.push({
	 		data: 'date',
	 		sTitle: 'Datum'
	 	})

	 	if(!surveyInfo.isPublic){
	 		standardColumns.push({
		 		data: 'firstName',
		 		sTitle: 'Voornaam',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'lastName',
		 		sTitle: 'Achternaam',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'email',
		 		sTitle: 'Email'
		 	});
		 	standardColumns.push({
		 		data: 'function',
		 		sTitle: 'Functie',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'age',
		 		sTitle: 'Leeftijd',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'gender',
		 		sTitle: 'Geslacht',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'gradeLevel',
		 		sTitle: 'Bouw',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'isTeacher',
		 		sTitle: 'Personeeltype',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'organisation',
		 		sTitle: 'Organisatie',
		 		bVisible: false
		 	});
		 	standardColumns.push({
		 		data: 'school',
		 		sTitle: 'School'
		 	});
		 	standardColumns.push({
		 		data: 'city',
		 		sTitle: 'Plaatsnaam',
		 		bVisible: false
		 	});
	 	};

	 	standardColumns.push({
		    	data: 'link',
		    	sTitle: 'Bekijk',
		    	sortable: false
		    });

	 	$progress.progress('increment');

      	var surveyColumns = survey.getAllQuestions().map(function(q, i) {
      	  var maxColumnsFromSurvey = surveyInfo.isPublic ? 4 : 1;
          return {
          	type: q.getType(),
          	choices: ['radiogroup','checkbox','dropdown'].includes(q.getType()) ? q.choices.map(c => c.text) : [],
          	values: ['radiogroup','checkbox','dropdown'].includes(q.getType()) ? q.choices.map(c => c.value) : [],
          	question: q,
            data: q.name,
            sTitle: (q.title || "").trim(" ") || q.name,
            bVisible: i > maxColumnsFromSurvey ? false : true,
            mRender: function(data, type, row) {
              survey.data = row;
              var displayValue = q.displayValue;
              return (
                (typeof displayValue === "string"
                  ? displayValue
                  : JSON.stringify(displayValue)) || ""
              );
            }
          };
        });

	    var columns = standardColumns.concat(surveyColumns);

	    var table = $("#resultsTable").DataTable({
	    	retrieve: true,
	        columns: columns,
	        data: results,
	        dom: 'Bfrtip',
	        buttons: [
	            'copy', 'csv', 'excel', 'colvis'
	        ],
	        "language": {
			    "sProcessing": "Bezig...",
			    "sLengthMenu": "_MENU_ resultaten weergeven",
			    "sZeroRecords": "Geen resultaten gevonden",
			    "sInfo": "_START_ tot _END_ van _TOTAL_ resultaten",
			    "sInfoEmpty": "Geen resultaten om weer te geven",
			    "sInfoFiltered": " (gefilterd uit _MAX_ resultaten)",
			    "sInfoPostFix": "",
			    "sSearch": "Zoeken:",
			    "sEmptyTable": "Geen resultaten aanwezig in de tabel",
			    "sInfoThousands": ".",
			    "sLoadingRecords": "Een moment geduld aub - bezig met laden...",
			    "oPaginate": {
			        "sFirst": "Eerste",
			        "sLast": "Laatste",
			        "sNext": "Volgende",
			        "sPrevious": "Vorige"
			    },
			    "oAria": {
			        "sSortAscending":  ": activeer om kolom oplopend te sorteren",
			        "sSortDescending": ": activeer om kolom aflopend te sorteren"
			    },
			    "buttons": {
	                "colvis": "Zichtbare kolommen"
	            }
			},
			initComplete: function () {
				if(surveyInfo.isPublic){
					return; //no filters on public surveys
				}
	            this.api().columns([1,2,3,4,6,7,8,9,10,11]).every( function () {
	                var column = this;
	                var select = $('<select><option value=""></option></select>')
	                    .appendTo( $(column.header() ))
	                    .on( 'change', function () {
	                        var val = $.fn.dataTable.util.escapeRegex(
	                            $(this).val()
	                        );
	 
	                        column
	                            .search( val ? '^'+val+'$' : '', true, false )
	                            .draw();
	                    } );
	 
	                column.data().unique().sort().each( function ( d, j ) {
	                	if(d.length>0){
	                		select.append('<option value="' + d + '">' + d.substr(0,30) + '</option>')
	                	}
	                } );
	            } );
	        }
	      });

	    $progress.progress('increment');

	    surveyColumns.forEach(function(column, i){
	    	var extraInfo = ['radiogroup','dropdown', 'checkbox', 'boolean', 'rating'].includes(column.type) ? '' : "Er is geen grafiek beschikbaar voor het type vraag ";
	    	$( "#resultCharts" ).append( "<div class='eight wide column'>" + 
	    									"<h4 class='content'>"  +
	    										column.sTitle + 
	    									"</h4><div class='content'>" +
	    										extraInfo + column.type +
	    										"</div>" +
	    										"<div id='chart" + i + "'>" + 
	    										"</div>" +
	    								"</div>" );

	    	if(column.type == 'boolean'){
	    		var chartData = [];
	    		var yesAnswers = 0;
	    		var noAnswers = 0
		    	results.forEach(function(result){
		    		if(result[column.data] ){
		    			yesAnswers += 1;
		    		} else {
						noAnswers += 1;
		    		}
		    	})
		    	chartData.push({name: 'Ja', value: yesAnswers});		    	
		    	chartData.push({name: 'Nee', value: noAnswers});
		    	showPieChart(chartData, i);
		    } else if(column.type == 'rating'){
		    	var chartData = [];
		    	var step;
		    	var stepIndex = 0;
		    	for (step = column.question.rateMin; step <= column.question.rateMax; step+=column.question.rateStep) {
				  // Runs 5 times, with values of step 0 through 4.
				  var value = step;
				  if(column.question.rateValues 
				  			&& column.question.rateValues.length == column.question.rateMax){
				  	value = column.question.rateValues[stepIndex].value;
				  }
				  var nameInfo = step;
				  if(step == column.question.rateMin){
				  	nameInfo = step + " " + column.question.minRateDescription;
				  } else if(step == column.question.rateMax){
				  	nameInfo = step + " " + column.question.maxRateDescription;
				  }
				  if(column.question.rateValues 
				  			&& column.question.rateValues.length == column.question.rateMax){

				  	nameInfo = column.question.rateValues[stepIndex].text;
				  }
				  var numberTimesChosen = 0;
				  results.forEach(function(result){
				  		if (result[column.data]==value) {
			    				numberTimesChosen += 1;
			    		};
			    	});
				  var newData = {name: nameInfo, value: numberTimesChosen};
    			  chartData.push(newData);
    			  stepIndex += 1;
				}
		    	showPieChart(chartData, i);
	    	} else if(['radiogroup','dropdown', 'checkbox'].includes(column.type)){
	    		var chartData = [];
	    		column.values.forEach(function(value, i){
	    			var numberTimesChosen = 0;
	    			results.forEach(function(result){
		    			if(column.type=='checkbox' && result[column.data].includes(value)){
		    				numberTimesChosen += 1;
		    			} else if (result[column.data]==value) {
		    				numberTimesChosen += 1;
		    			};
			    	})
    				var newData = {name: column.choices[i], value: numberTimesChosen};
    				chartData.push(newData);
    			});
		    	showPieChart(chartData, i);
	    	} else {
	    		console.log('not the right chart type');
	    	};
	    	

	    });

	    $progress.progress('increment');

		function showPieChart(chartDataSource, i) {
		    document
		        .getElementById("chart" + i)
		        .style
		        .height = "300px"
		        .width = "300px";
		    $("#chart" + i).dxPieChart({
		    	palette: [
                    'rgba(0,159,227, 1)',
                    'rgba(227,6,19,1)',
                    'rgba(249,178,51, 1)',
                    'rgba(0, 0, 0, 1)',
                    'rgba(18,172,19, 1)',
                    'rgba(34, 34, 188, 1)',
                    'rgba(246, 190, 91, 1)',
                    'rgba(58, 58, 58, 1)',
                    'rgba(191,35,66, 1)',
                    'rgba(36, 83, 189, 1)',
                    'rgba(249, 203, 19, 1)',
                    'rgba(112, 112, 112, 1)',
                ],
                legend: {
                	verticalAlignment: 'bottom',
                	horizontalAlignment: 'center',
                },
		        dataSource: chartDataSource,
		        series: {
		            argumentField: 'name',
		            valueField: 'value',
		            label: {
		            	visible: true,
		            	position: 'inside'
		            }
		        }
		    });
		}

		$progress.progress('increment');

		if(surveyInfo.isCompetenceSurvey){
			var statisticsString = $( '#statistics' ).text();

			var statistics = JSON.parse(statisticsString || '[]')

			var data = [];

			statistics.forEach(function(stat, statIndex){
				var trace = {
					boxpoints: 'all',
					y: stat.statistics,
					type: 'box',
					name: stat.title,
					jitter: 0.3,
	    			pointpos: -1.8,
					// fillcolor: chartColors[statIndex],
				}
				data.push(trace);
			});

			var layout = {
			  showlegend: true,
			  autosize: true,
			  width: 1200,
			  height: 800
			  
			}
			Plotly.newPlot('analysisChart', data, layout, {responsive: true});
		} else if(surveyInfo.isSoftwareSurvey){
			var bubblesString = $( '#bubblesInfo' ).text();

			console.log(bubblesString);

			var bubbles = JSON.parse(bubblesString || '[]');

			console.log(bubbles);
			
			var traces = [];

			bubbles.x.forEach(function(bubble, index){
				var newTrace = {
				  x: [bubbles.x[index]],
				  y: [bubbles.y[index]],
				  text: [bubbles.text[index]],
				  mode: 'markers',
				  marker: {
				    color: [bubbles.color[index]],
				    size: [bubbles.size[index]],
				  },
				  name: bubbles.text[index],
				};
				traces.push(newTrace);
			})

			var data = traces;

			var layout = {
			  title: 'Frequentie versus Noodzaak en Kwaliteit',
			  showlegend: true,
			  height: 800,
			  width: 1200,
			  xaxis: {
			  	title: 'Frequentie (0 = weinig, 1 = zeer vaak)'
			  },
			  yaxis: {
			  	title: 'Noodzaak (0 = niet belangrijk, 1 = essentieel)'
			  }
			};

			Plotly.newPlot('bubblesChart', data, layout);
		}

		$progress.progress('increment');
					
	});
</script>