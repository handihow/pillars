<html lang="en">
    <head>
        <title>Pillars</title>
        <link rel="shortcut icon" href="/img/logo.ico" type="image/x-icon" />
        <meta name="viewport" content="width=device-width"/>
        <script type="text/javascript" charset="utf8" src="/scripts/jquery.min.js"></script>
        <script type="text/javascript" charset="utf8" src="/scripts/survey.jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/promise-polyfill@8/dist/polyfill.min.js"></script>
        <script src="https://unpkg.com/jspdf@1.5.3/dist/jspdf.min.js"></script>
        <script type="text/javascript" charset="utf8" src="/scripts/survey.pdf.min.js"></script>
        <script src="https://unpkg.com/sortablejs@1.7.0/Sortable.js"></script>
        <script type="text/javascript" charset="utf8" src="/scripts/surveyjs-widgets.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.1.1/exceljs.min.js"></script>
        <link rel="stylesheet" type="text/css" href="/scripts/survey.min.css" />
        
        <style>
            table {
                font-size: unset;
            }
            .sv_main .sv_container .sv_body .sv_p_root table.sv_q_matrix td {
                 min-width: unset; 
                 padding: 5px;
            }
            .sv_main .sv_container .sv_body .sv_p_root .sv_q_description {
                font-size: 12px;
                margin-bottom: 5px;
            }
            #surveyElementContainer{
                max-width:750px;
                margin:auto;
                background-color: white;
                border-radius: 15px;
                box-shadow: 0 2px 12px rgba(0, 0, 0, 0.12), 0 2px 8px rgba(0, 0, 0, 0.24);
            }
            .sv_main {
              font-family: Lato;
              font-size: 14px;
              border-radius: 15px;
            }
            .sv_main .sv_container .sv_body .sv_p_root .sv_q .sv_q_imgsel label > div {
                font-size: 12px;
            }
            .sv_main input[type="button"], .sv_main button {
                font-family: Lato,'Helvetica Neue',Arial,Helvetica,sans-serif;
                margin: 0 .25em 0 0;
                padding: .78571429em 1.5em .78571429em;
                line-height: 1em;
                border-radius: .28571429rem;
            }
            .survey__button
            {
                font-family: Lato,'Helvetica Neue',Arial,Helvetica,sans-serif;
                margin: 0 .25em 0 0;
                padding: .78571429em 1.5em .78571429em;
                line-height: 1em;
                border-radius: .28571429rem;
                font-size: 0.85em;
                font-weight: bold;
                border: none;
                min-width: 100px;
                cursor: pointer;
                color: white;
                background-color: rgb(0, 159, 227);
            }
            .sjs-sortablejs-item{
                background-color: #009FE3 !important;
                cursor: move;
            }

        </style>
    </head>
    <body style="background-color:gainsboro">

        <div id="surveyElementContainer">
            <%if(isShow){%>
                <button class="survey__button pdf__button" onclick="saveSurveyToPdf()" style="margin:10px">Download PDF</button>
                <button class="survey__button" type="button" 
                    onclick="window.open('', '_self', ''); window.close();" style="margin:10px">Sluiten</button>
                <div id="surveyData" hidden><%= JSON.stringify(surveyResult.result) %></div>
            <%}%>
            <div id="surveyElement" style="display:inline-block;width:100%;"></div>
        </div>
        <div id="surveyResult"></div>
        <div id="surveyText" hidden><%= JSON.stringify(survey.survey)%></div>
        <div id="surveyId" hidden><%= survey._id %></div>
        <div id="surveyKey" hidden><%= survey.competenceStandardKey %></div>
        <div id="categories" hidden><%= JSON.stringify(categories) %></div>
        <div id="isShowing" hidden><%= isShow %></div>
        <div id="softwareText" hidden><%= JSON.stringify(software)%></div>
        <div id="currentUser" hidden><%=JSON.stringify(currentUser)%></div>

        <script>
                
                var initialText = $( '#surveyText' ).text();
                var json = JSON.parse(initialText);
                var surveyId = $( '#surveyId' ).text();
                var surveyKey = $( '#surveyKey' ).text();
                var categoriesText = $( '#categories' ).text();
                var categories = JSON.parse(categoriesText);
                var isShow = $( '#isShowing' ).text() || 'false';

                setCustomSurveyProperties = function(){
                  var customSurveyProperties =  
                    [
                      {
                        identifier: 'isprofilequestion',
                        title: 'Is profielvraag',
                        type: 'boolean',
                        default: false,
                        dependsOn: null
                      },
                      {
                        identifier: 'istestquestion',
                        title: 'Is onderdeel van test',
                        type: 'boolean',
                        default: false,
                        dependsOn: null
                      },
                      {
                        identifier: 'subject',
                        title: 'Onderdeel',
                        type: 'choices',
                        dependsOn: 'istestquestion',
                        choices: [
                            {value: 'DG', text: 'Digitale geletterdheid'}, 
                            {value: 'PDH', text: 'Pedagogisch didactisch handelen'}, 
                            {value: 'PO', text: 'Persoonlijke ontwikkeling'},
                            {value: 'WSC', text: 'Werken in de schoolcontext'}
                        ]
                      }, 
                      { 
                        identifier: 'topic',
                        title: 'Subonderdeel',
                        type: 'choices',
                        dependsOn: 'subject',
                        choices: function(obj){
                            var entity = !!obj
                                ? obj.subject
                                : null;
                            //If targetEntity is empty then return the empty array
                            if (!entity) {
                                return [];
                            } else {
                                var choices = [];
                                categories.forEach(function(ac){
                                    if(ac.parent === entity){
                                        choices.push({
                                            value: ac.value,
                                            text: ac.text
                                        })
                                    }
                                })
                                return choices;
                            }
                        }
                      },
                      {
                        identifier: 'maxscore',
                        title: 'Maximum score',
                        type: 'number',
                        default: 100,
                        dependsOn: 'istestquestion'
                      },
                      {
                        identifier: 'minscore',
                        title: 'Min score vaardig',
                        type: 'number',
                        dependsOn: 'istestquestion',
                      }
                    ];
                    customSurveyProperties.forEach(property => {
                      if(property.type === 'choices'){
                        //It uses rest full service and choicesCallback function to tell property editor that choices are loaded from the web
                        Survey.Serializer.addProperty('question', { 
                          name: property.identifier, 
                          title: property.title,
                          dependsOn: property.dependsOn,
                          visibleIf: function(obj){
                            if(property.dependsOn && !obj[property.dependsOn]){
                              return false;
                            } else {
                              return true;
                            }
                          },
                          choices: property.choices                
                        });
                      } else {
                        Survey.Serializer.addProperty('question', { 
                          name: property.identifier, 
                          type: property.type, 
                          default: property.default,
                          dependsOn: property.dependsOn,
                          visibleIf: function(obj){
                            if(property.dependsOn && !obj[property.dependsOn]){
                              return false;
                            } else {
                              return true;
                            }
                          }
                         });
                      }
                    });
                    // add score value to each itemvalue (matrix, select, dropdown)
                    Survey.Serializer.addProperty('itemvalue', {name: 'score', type: 'number'});
                }

                getSafe = function (fn, defaultVal) {
                    try {
                        return fn();
                    } catch (e) {
                        return defaultVal;
                    }
                }


                var mainColor = "#009FE3";
                var mainHoverColor = "#F9B233";

                var defaultThemeColorsSurvey = Survey
                    .StylesManager
                    .ThemeColors["default"];
                defaultThemeColorsSurvey["$main-color"] = mainColor;
                defaultThemeColorsSurvey["$main-hover-color"] = mainHoverColor;
                
                Survey
                .StylesManager
                .applyTheme();

                if(surveyKey === 'podd' || surveyKey === 'ddl'){
                    setCustomSurveyProperties();
                }

                window.survey = new Survey.Model(json);

                survey.locale = 'nl';
                survey.completedHtml = `<h2>Klaar met invullen</h2>

                    <p>Bedankt voor het invullen van de test. Je kunt direct terug naar de home pagina of eerst je test als PDF downloaden.</p>

                    <a href="/home">Naar home pagina</a>

                    <button class='pdf__button' onclick="saveSurveyToPdf()" style="margin:10px">Download PDF</button>`

                var softwareText = $( '#softwareText' ).text();
                var softwareJSON = JSON.parse(softwareText);

                var currentUserText = $( '#currentUser' ).text();
                var currentUser = JSON.parse(currentUserText);

                if(softwareJSON.hasInfo){
                    survey.data = {
                        'course': softwareJSON.course,
                        'name': softwareJSON.name,
                        'gradeLevels': softwareJSON.gradeLevels,
                        'supplier': softwareJSON.supplier,
                        'type': softwareJSON.type,
                        'school': softwareJSON.school,
                        'softwareId': softwareJSON.id
                    }
                    survey.clearInvisibleValues = 'none';
                }

                $("#surveyElement").Survey({model: survey});

                if(isShow !=='false'){
                    survey.mode = 'display';
                    var surveyDataText = $( '#surveyData' ).text();
                    var surveyData = JSON.parse(surveyDataText);
                    if(surveyKey === 'podd' || surveyKey === 'ddl'){
                        for(key in surveyData) survey.setValue(key, surveyData[key]);
                        survey
                        .onAfterRenderQuestion
                        .add(function (survey, options) {
                            //Return if there is max score  
                            if (!options.question.istestquestion) 
                                return;
                            var maxScore=document.createElement("span"); 
                            maxScore.innerHTML = '/ '+ options.question.maxscore;
                            var score = document.createElement("span");
                            score.innerHTML = calculateQuestionScore(options.question);
                        
                            var header = options
                                .htmlElement
                                .querySelector("div");
                            header.prepend(maxScore);
                            header.prepend(score);
                            // options.question.readOnly = true;
                        });
                    } else {
                        var normalizedData = {};
                        survey.getAllQuestions().forEach(function(q) {
                          if (surveyData[q.name] === undefined) {
                            normalizedData[q.name] = "";
                          } else if(surveyData[q.name] === true) {
                            normalizedData[q.name] = "true"
                          } else if(surveyData[q.name] === false) {
                            normalizedData[q.name] = "false"
                          } else {
                            normalizedData[q.name] = surveyData[q.name];
                          }
                        });
                        survey.data = normalizedData;
                    }
                }

                function saveSurveyToPdf() {
                    $(".pdf__button")
                    .attr("disabled", true)
                    .html('Even geduld...')
                    .css('background-color','grey')
                    .css('cursor', 'progress');
                    var options = {
                        fontSize: 14,
                        margins: {
                            left: 10,
                            right: 10,
                            top: 10,
                            bot: 10
                        },
                        format: [210, 297],
                        commercial: true
                    };
                    var surveyPDF = new SurveyPDF.SurveyPDF(json, options);
                    surveyPDF.data = survey.data;
                    surveyPDF.save("Pillars ingevulde vragenlijst.pdf")
                    .then(_ => {
                        $(".pdf__button")
                        .attr("disabled", false)
                        .html('Download PDF')
                        .css('background-color','rgb(0, 159, 227)')
                        .css('cursor', 'pointer');
                    });
                }

                var storageName = "SurveyJS_LoadState";
                var timerId = 0;

                function loadState(survey) {
                    if(isShow !=='false'){return}
                    //Here should be the code to load the data from your database
                    var storageSt = window
                        .localStorage
                        .getItem(storageName) || '';


                    var res = {};
                    if (storageSt && storageSt.length>0){
                        res = JSON.parse(storageSt); //Create the survey state for the demo. This line should be deleted in the real app.
                    } else {
                        for(key in currentUser) survey.setValue(key, currentUser[key]);
                    }

                    //Set the loaded data into the survey.
                    if (res.currentPageNo) {
                        survey.currentPageNo = res.currentPageNo;
                    }
                        
                    if (res.data) {
                        for(key in res.data) survey.setValue(key, res.data[key]);
                    }
                }

                function saveState(survey) {
                    if(isShow !=='false'){return}
                    var res = {
                        currentPageNo: survey.currentPageNo,
                        data: survey.data
                    };
                    //Here should be the code to save the data into your database
                    window
                        .localStorage
                        .setItem(storageName, JSON.stringify(res));
                }

                //Load the initial state
                loadState(survey);

                //save the data every 10 seconds, it is a good idea to change it to 30-60 seconds or more.
                timerId = window.setInterval(function () {
                    saveState(survey);
                }, 10000);

                var score = 0;
                var scores;var flags;var questionScores;
                var questionResults = [];

                survey
                .onComplete
                .add(function (result) {
                     //kill the timer
                     clearInterval(timerId);
                     //remove survey answers from local storage
                     localStorage.removeItem(storageName);
                     var data = {
                            result: JSON.stringify(result.data)
                        };
                     if(surveyKey === 'podd' || surveyKey === 'ddl'){
                        data.score = score;
                        data.statistics = JSON.stringify(scores);
                        data.flags = JSON.stringify(flags);
                        data.questionScores = JSON.stringify(questionScores);
                     }
                     $.ajax({
                        url: window.location.origin + "/survey/" + surveyId + "/private",
                        type: "POST",
                        data: data,
                        success: function (data) {
                            if(data.success){
                                document
                                .querySelector('#surveyResult')
                                .innerHTML = "<a href='" + window.location.origin + "/survey/" 
                                                + data.surveyResultId +  "/result'>Bekijk je inzending</a>";
                            } else {
                                alert(data.error);
                            }
                        },
                        error: function(err) {
                            alert('Er ging iets mis');
                        }
                    });

                });

                calculateQuestionScore = function(q){
                  var questionType = q.getType();
                  var score = 0;
                  switch (questionType) {
                      case "boolean":
                        if(q.value){ score += q.maxscore ? q.maxscore : 0 }
                        break;
                      case "checkbox":
                      case "radiogroup":
                      case "dropdown":
                      case "imagepicker":
                        if(q.value && Array.isArray(q.value)){
                          q.choices.map(c => score += q.value.includes(c.value) ? c.score : 0 );
                        } else if(q.value){
                          q.choices.map(c => score += q.value === c.value ? c.score : 0 );
                        }
                        break;
                      case "rating":
                        if(q.value){
                          q.rateValues.map(rv => score += rv.value == q.value ? rv.score : 0);
                        }
                        break;
                      case "matrix":
                        q.rows.map(r => {
                          let rowValue = getSafe(() => q.value[r.value], 'norowvalue');
                          let rowScore = r.score === 0 || r.score ? r.score : 1;
                          let columnIndex = q.columns.findIndex(c => c.value == rowValue);
                          if(columnIndex > -1){
                            score += q.columns[columnIndex].score ? q.columns[columnIndex].score * rowScore : 0;
                          }
                        });
                        break;
                      case "sortablelist":
                        q.choices.map(c => score += q.value.includes(c.value) ? c.score : 0 );
                        if(!JSON.stringify(q.choices)==JSON.stringify(q.correctAnswer)){
                            //not the correct order you get only 50% of score
                            score = score * 0.5;
                        }
                        break;
                      default:
                        console.log(questionType + ' is not part of calculation matrix');
                        break;
                    }
                  return score;
                }

                createExcel = function(){
                    
                    const workbook = new ExcelJS.Workbook();
                    const sheet = workbook.addWorksheet('PODD resultaten');
                    sheet.columns = [
                      { header: 'ID', key: 'id', width: 20 , style: {font: {bold: true}}},
                      { header: 'Vraag', key: 'question', width: 70 , style: {font: {bold: true}}},
                      { header: 'Onderdeel', key: 'topic', width: 20 , style: {font: {bold: true}}},
                      { header: 'Min Score', key: 'minscore', width: 10 , style: {font: {bold: true}}},
                      { header: 'Max Score', key: 'maxscore', width: 10 , style: {font: {bold: true}}},
                      { header: 'Score', key: 'score', width: 10 , style: {font: {bold: true}}},
                      { header: 'Advies', key: 'advice', width: 20 , style: {font: {bold: true}}},
                    ];
                    questionResults.forEach(function(result){
                        var row = sheet.addRow(result);
                        row.font = {bold: false};
                        if(result.advice === 'Score te laag'){
                            row.fill = {
                              type: 'pattern',
                              pattern: 'solid',
                              fgColor: { argb:'FFFFFF00' }
                            };
                        }
                    });

                    workbook.xlsx.writeBuffer().then(function (data) {
                        var excelData = new Blob([data], {type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"});
                        var excelURL =  null;
                        if (navigator.msSaveBlob)
                        {
                            excelURL = navigator.msSaveBlob(excelData, 'overzichtpillars.xlsx');
                        }
                        else
                        {
                            excelURL = window.URL.createObjectURL(excelData);
                        }

                        var tempLink = document.createElement('a');
                        tempLink.href = excelURL;
                        tempLink.setAttribute('download', 'overzichtpillars.xlsx');
                        tempLink.click();

                    });
                                        
                }

                if(surveyKey==='podd' || surveyKey === 'ddl'){


                    survey.onCurrentPageChanging.add(function(sender, options){
                        if(options.newCurrentPage.name === 'WSCCOM' && options.oldCurrentPage === 'ADVISE'){
                            options.allowChanging = false;
                        } else {
                            options.allowChanging = true;
                        }
                        if(options.newCurrentPage.name === 'ADVISE'){
                            survey.showPrevButton = false;
                            var numberQuestions = {}; 
                            var numberWrongAnswered = {};
                            var grandTotal = 0;
                            var grandTotalQuestions = 0;
                            scores = {};
                            flags = {};
                            questionScores = {};
                            var html = `
                                <h2>Jouw Overzicht Digitale Deskundigheid</h2>
                                <p>We hebben jouw antwoorden geanalyseerd op verschillende deelgebieden.</p>
                                <h3>Aandachtsgebieden</h3>
                            `;
                            categories.forEach(function(cat){
                                var total = 0;
                                var questions = 0;
                                numberWrongAnswered[cat.name] = 0;
                                var flag = false;
                                var categoryQuestions = survey.getAllQuestions().filter(function(q){
                                    return q && q.istestquestion && q.topic === cat.name && q.isVisible && q.isParentVisible;
                                });
                                if(categoryQuestions.length>0){
                                    categoryQuestions.forEach(function(question){
                                        var result = calculateQuestionScore(question);
                                        var percent = result/question.maxscore;
                                        questionResults.push({
                                            'id': question.name,
                                            'question': question.fullTitle,
                                            'topic': cat.title,
                                            'minscore': question.minscore,
                                            'maxscore': question.maxscore,
                                            'score': result,
                                            'advice': result < question.minscore ? 'Score te laag' : 'Vaardig'
                                        });
                                        questionScores[question.name] = Math.round(percent*100);
                                        total += percent;
                                        grandTotal += percent;
                                        questions ++;
                                        grandTotalQuestions ++;
                                        if(result < question.minscore){
                                            flag = true;
                                            numberWrongAnswered[cat.name] ++;
                                        }
                                    });
                                }
                                numberQuestions[cat.name] = questions;
                                scores[cat.name] = questions === 0 ? 0 : Math.round(total / questions * 100);
                                flags[cat.name] = flag;
                            });
                            var flaggedCategories = categories
                            .filter(function(cat){
                                return flags[cat.name];
                            });
                            if(flaggedCategories.length === 0){
                                html += '<p>Gefeliciteerd! Er zijn geen deelgebieden waar je onvoldoende hebt gescoord.</p>'
                            } else {
                                html += '<p>Op de volgende deelgebieden heb je op minimaal één vraag minder punten gehaald dan de gestelde norm:</p><ul>'
                                flaggedCategories.forEach(function(cat){
                                    html += '<li>' + cat.title + ': op ' + numberWrongAnswered[cat.name] + ' van de ' + numberQuestions[cat.name] + ' vragen</li>'
                                });
                                html += '</ul><p>We adviseren je om deze deelgebieden op te nemen in je actieplan.</p>'
                            }
                            html +='<p>In de volgende stap kun je het actieplan samenstellen.</p>';
                            html += `
                                <h4>Hulpmiddel, geen test!</h4>
                                <p>Dit overzicht geeft inzicht in deelgebieden waar je jezelf in kunt verbeteren. Je hebt het niet goed of fout gedaan. Je krijgt na deze test nog uitgebreid de kans om jouw antwoorden te analyzeren.</p>
                                <button class="survey__button" onclick="createExcel()" style="margin:10px">Download Resultaten</button>
                            `;
                            if(surveyKey === 'podd'){
                                var adviceQuestion = survey.getQuestionByName('advice');
                                adviceQuestion.html = html;    
                            }
                            score = grandTotalQuestions === 0 ? 0 : Math.round(grandTotal / grandTotalQuestions * 100) / 100;
                        } else {
                            survey.showPrevButton = true;
                        }
                    })
                }
            
            
        </script>
            

    </body>
</html>