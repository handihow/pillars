<% include ../partials/header %>
<% include ../partials/main-menu %>
<% include ../partials/flash-message %>
<%if(typeof school !== 'undefined'){%>
  <% include ../partials/school-header %>
  <%- include('../' +header +'/header')  %>
<%} else if(typeof organisation !== 'undefined'){%>
  <% include ../partials/organisation-header %>
  <%- include('../overview/' + header +'-header')  %>
<%} else {%>
  <% include ../partials/admin-header %>
<%}%>


  <div class="ui placeholder segment" id="loader">
    <div class="ui active inverted dimmer">
      <div class="ui text loader">Laden..</div>
    </div>
    <p></p>
  </div>
  <div id="tableContainer">
    
    <table class="ui celled small blue table" id="dynamicTable">
        <thead>
          <tr>
            <th></th>
            <th></th>
            <%if(typeof organisation !== 'undefined'){%>
              <th></th>
            <%}%>
            <%columns.forEach(column => { %>
              <th></th>
            <% }) %>
            <%if(hasWarningRow){%><th></th><%}%>
          </tr>
        </thead>
        <tbody id="dynamicTableBody"></tbody>
    </table>
  </div>

<div id="columnData" hidden><%=JSON.stringify(columns)%></div>
<div id="itemsData" hidden><%=JSON.stringify(items)%></div>
<div id="warningRowData" hidden><%=hasWarningRow !== 'undefined' && hasWarningRow ? 'true' : 'false'%></div>
<div id="allowNewEntriesData" hidden><%= typeof allowNewEntries !== 'undefined' && allowNewEntries ? 'true' : 'false'%></div>
<div id="headerData" hidden><%=header%></div>
<div id="organisationData" hidden><%=typeof organisation !== 'undefined' ? 'true' : 'false'%></div>

<%if(typeof school !== 'undefined'){%>
  <% include ../partials/school-footer %>
<%} else if(typeof organisation !== 'undefined'){%>
  <% include ../partials/organisation-footer %>
<%} else {%>
  <% include ../partials/admin-footer %>
<%}%>
<% include ../partials/footer %>

<script>

  var editor; // use a global for the submit and return data rendering in the examples
 
  $(document).ready(function() {

    var columnText = $('#columnData').text();
    var columnData = JSON.parse(columnText);

    var header = $('#headerData').text();

    var itemsText = $('#itemsData').text();
    var itemsData = JSON.parse(itemsText);

    var hasWarningRowText = $('#warningRowData').text();
    var hasWarningRow = hasWarningRowText === "true" ? true : false;
    var warningRowIndex = 0;
    if(hasWarningRow){
      warningRowIndex = columnData.findIndex(c => c.id === 'warning');
    }

    var allowNewEntriesText = $('#allowNewEntriesData').text();
    var allowNewEntries = allowNewEntriesText === "true" ? true : false;

    var hasOrganisationText = $('#organisationData').text();
    var hasOrganisation = hasOrganisationText === "true" ? true : false;

    var urlParams = new URLSearchParams(window.location.search);
    var searchParam = ""
    if(urlParams.has('type')){
      searchParam = urlParams.get('type')
    }

    var tableColumns = [
      {
         'targets': 0,
         'checkboxes': {
            'selectRow': true
         },
         data: '_id'
      },
      {
          data: null,
          sTitle: 'Record',
          className: 'selectable',
          orderable: false,
          bVisible: true,
          render: function ( data, type, row ) {
            return '<a href="/' + header + '/' + data._id + '">Bekijk</a>';
          }
      }
    ];

    var fields = [];

    if(hasOrganisation){
      tableColumns.push({
        data: 'schoolName',
        sTitle: 'Instellingsnaam',
        className: 'disabled',
        bVisible: true
      });
      fields.push({
        label: 'Instellingsnaam',
        name: 'schoolName',
        type: "readonly"
      })
    }
    
    columnData.forEach(function(column){
      tableColumns.push({
        data: column.id,
        sTitle: column.short,
        bVisible: !column.hidden
      });
      if(column.standardValueFieldType && column.standardValueFieldType === 'select'){
        var options = [];
        column.standardValueOptions.forEach(function(option){
          options.push({
            label: option,
            value: option
          })
        })        
        fields.push({
          label: column.description,
          name: column.id,
          type:  "select",
          options: options
        })
      } else {
        fields.push({
          label: column.description,
          name: column.id
        })
      }
      
     })

    if(hasWarningRow){
      tableColumns.push({
        data: 'warning',
        sTitle: 'Waarschuwing',
        className: 'disabled',
      });
      fields.push({
        label: 'Waarschuwing',
        name: 'warning',
        type: "readonly"
      })
    }

    editor = new $.fn.dataTable.Editor( {
        table: "#dynamicTable",
        idSrc:  '_id',
        ajax: {
          url: '/api/tableeditor',
          data: {
            collectionId: header
          }
        },
        fields: fields,
        i18n: {
            create: {
                button: "Voeg toe",
                title:  "Item toevoegen",
                submit: "Bewaar"
            },
            edit: {
                button: "Bewerk",
                title:  "Item bewerken",
                submit: "Bewaar"
            },
            remove: {
                button: "Verwijder",
                title:  "Item verwijderen",
                submit: "Definitief verwijderen",
                confirm: {
                    _: "Wilt %d rijen definitief verwijderen?",
                    1: "Wil je 1 rij definitief verwijderen?"
                }
            },
            error: {
                system: "Er is een fout opgetreden. Neem contact op met de admin."
            }
        }
    } );

    // Activate an inline edit on click of a table cell
    $('#dynamicTable')
    .on( 'click', 'tbody td:not(:first-child)', function (e) {
        editor.inline( this, {
          onBlur: 'submit'
        } );
    });

    var buttons = [        
        { extend: "edit",   editor: editor },
        { extend: "remove", editor: editor },
        'colvis',
        'excel',
      ];
    if(allowNewEntries){
      buttons.unshift({
        extend: 'create', editor: editor
      })
    }


    var dataTableSettings = {
      search: {
        search: searchParam
      },
      pageLength: 25,
      select: {
          style:    'multi',
          selector: 'td:first-child'
      },
      keys: {
          columns: ':not(:first-child)',
          editor:  editor
      },
      'order': [[2, 'asc']],
      buttons: buttons,
      dom: 'Bfrtip',
      "language": {
        "sProcessing": "Bezig...",
        "sLengthMenu": "_MENU_ resultaten weergeven",
        "sZeroRecords": "Geen resultaten gevonden",
        "sInfo": "_START_ tot _END_ van _TOTAL_ resultaten",
        "sInfoEmpty": "Geen resultaten om weer te geven",
        "sInfoFiltered": " (gefilterd uit _MAX_ resultaten)",
        "sInfoPostFix": "",
        "sSearch": "Zoeken:",
        "sEmptyTable": "Geen resultaten aanwezig in de tabel",
        "sInfoThousands": ".",
        "sLoadingRecords": "Een moment geduld aub - bezig met laden...",
        "oPaginate": {
          "sFirst": "Eerste",
          "sLast": "Laatste",
          "sNext": "Volgende",
          "sPrevious": "Vorige"
        },
        "oAria": {
          "sSortAscending":  ": activeer om kolom oplopend te sorteren",
          "sSortDescending": ": activeer om kolom aflopend te sorteren"
        },
        "buttons": {
          "colvis": "Zichtbare kolommen"
        },
        "select" : {
            "rows": {
                _: "Je hebt %d rijen geselecteerd",
                0: "Klik op de checkbox om een rij te selecteren, of gebruik de checkbox 'Selecteer alles' links bovenaan in de tabel",
                1: "Je hebt 1 rij geselecteerd"
            }
        }
      }
    };

    var table = $("#dynamicTable").DataTable({
        ...dataTableSettings,
        rowCallback: function(row, data){
          if(data.warning && data.warning.length>0){
            if(data.warning === 'Apparaat is volgend jaar afgeschreven'){
              $("td:eq(" + warningRowIndex + ")",row).addClass("warning");
            } else {
              $("td:eq(" + warningRowIndex + ")",row).addClass("negative");
            }
          }
        },
        columns: tableColumns,
        data: itemsData,
     });


    table.on("click", "th.select-checkbox", function() {
        if ($("th.select-checkbox").hasClass("selected")) {
            table.rows().deselect();
            $("th.select-checkbox").removeClass("selected");
        } else {
            table.rows().select();
            $("th.select-checkbox").addClass("selected");
        }
    }).on("select deselect", function() {
        if (table.rows({
                selected: true
            }).count() !== table.rows().count()) {
            $("th.select-checkbox").removeClass("selected");
        } else {
            $("th.select-checkbox").addClass("selected");
        }
    });

    $('#loader').hide();

  });

</script>
